<?xml version="1.0" encoding="utf-8"?>
<configuration>
	<configSections>
		<section name="GroupElementsSection" type="ABTTestLibrary.Config.GroupElementsSection, ABTTestLibrary" />
		<section name="TestElementsSection" type="ABTTestLibrary.Config.TestElementsSection, ABTTestLibrary" />
	</configSections>
	<appSettings>
		<!-- Standard ABTTestLibrary Logger configuation settings, specific to the Logger sub-system.-->
		<add key="LOGGER_FileEnabled" value="true" />
		<!-- LOGGER_FileEnabled & LOGGER_SQLEnabled are independent of each other. -->
		<!-- Can choose to Log to Text only, SQL only, both Text & SQL or neither, depending what the Customer requires. -->
		<add key="LOGGER_FilePath" value="P:\Test\TDR\D4522137\Functional\" />
		<!-- Text Log Paths are only relevant if LOGGER_FileEnabled is true. -->
		<add key="LOGGER_SQLEnabled" value="false" />
		<!-- LOGGER_FileEnabled & LOGGER_SQLEnabled are independent of each other. -->
		<!-- Can choose to Log to Text only, SQL only, both Text & SQL or neither, depending what the Customer requires. -->
		<add key="LOGGER_SQLConnectionString" value="" />
		<!--  SQL connection string only relevant if LOGGER_SQLEnabled is true. -->
		<!-- Standard ABTTestLibrary UUT configuration settings, specific to the Unit Under Test. -->
		<add key="LOGGER_TestEventsEnabled" value="true" />
		<!-- See https://github.com/Amphenol-Borisch-Technologies/TestEvents -->
		<add key="UUT_Customer" value="Raytheon" />
		<add key="UUT_Type" value="CCA" />
		<!-- Reccommended choices: { System, Unit, CCA, Component }. -->
		<add key="UUT_Number" value="D4522137-2" />
		<add key="UUT_Revision" value="A" />
		<add key="UUT_Description" value="isoMicro" />
		<add key="UUT_TestSpecification" value="0001624557, Draft A" />
		<!-- Custom configuration settings specific to this APP, LOG or UUT. -->
		<!-- These settings should be initialized in the specific UUT's test program/application, and not ABTTestLibrary. -->
		<add key="CUSTOM_SMBusAddress" value="40" />
		<!-- isoMicro's SMB/System Management Bus device address, in hexadecimal format. -->
	</appSettings>
	<GroupElementsSection>
		<!--
	ID:			Required field.
				- Unique Identifier; no 2 can be identical, as ID is unique key in a Dictionary object.
				- Suggest T10, T20, T30, T40... ABT FilePro Traveler Test Operations.
	Required:	Required field.
				- If Required = true, it's a Group of Tests the UUT's customer requires
					be executed & pass in order to ship the UUT.
				- Required Groups generally correspond to FilePro Traveler
					operations; T10, T20, T30...
				- Multiple Groups can be required, if there are multiple
					FilePro Test Operations; T10, T20, T30...
				- If Required = false, Group is a custom subset of Tests
					solely useful for troubleshooting UUTs that don't pass
					their Required Groups.
				- Non-required Groups don't create valid test data nor report
					overall UUT results, just their custom Group results.
				- Recommend ordering all Required Groups by Test Operation,
					then non-Required as desired.
				- Order of Group appearance in this App.config determines order of
					appearance when selecting Groups in GroupSelection ListView,
					so optimally order them in the sequence they're performed;
				    (T10, T20, T30...)
	Revision:	Required field.
				- Revision of the Test Group's GroupElement.
				- Increment whenever any GroupElement field in Group changes; particularly when TestIDs are added or removed.
				- Add a comment to the GroupElement for each revision increment detailing modifications.
				  providing revision history
				- Essentially GroupElements are customer test requirements, hence Revision is a required field.
	Summary:	Required field.
				- Concise description of Group; "PowerUp performs all power application/measurement tests."
	Detail:-	Optional field.
				- Optional verbose description of Group:
				- "PowerUp:
					* Apply/measure +28.0 VDC.
					* Apply/measure +5.0 VDC.
					* Apply/measure +3.3 VDC.
					* Measure derived ±12.0 VDC
					* Measure derived +2.5 VDC
					* Measure derived +1.8 VDC
					* Measure derived +1.2 VDC"
	TestIDs:	Required field.
				- Tests in Group, *in order of execution*
				- 1 or more TestIDs from TestElements, separated by '|'.
				- Tests execute in *entry order*:
					- Entry "T3|T1|T2" executed in sequence (T3, T1, T2).
					- Entry "T1|T2|T3" executed in sequence (T1, T2, T3).
					- Entry "T2|T3|T1" executed in sequence (T2, T3, T1).

	ABT Test Operations to Raytheon 0001624557 Test Paragraphs:
		T10: 5.1 SSTO Flying Probe, P00010.
		T20: 5.2 Inductance Check, P00050.
		T30: 5.3 Initial Power Up, P00100 - P00200.
				5.4 UUT Programming, P00300 - P00600.
				5.5 Initial Configuration, P00700 - P00750.
				5.6 Power Stage Health Check, P00800 - P10200.
		T50: 6.0 Calibration & Final Test, P10300 - P11800.
	-->
		<GroupElements>
			<GroupElement ID="T30"
						  Required="true"
						  Revision="1.0"
						  Summary="PreMold"
						  Detail="5.3 Initial Power Up, P00100 - P00200.&#xD;&#xA; 5.4 UUT Programming, P00300 - P00600.&#xD;&#xA; 5.5 Initial Configuration, P00700 - P00750.&#xD;&#xA; 5.6 Power Stage Health Check, P00800 - P10200."
						  TestIDs="P00100|P00101" />
			<!-- GroupElement Revision 1.0 is initial release. -->
			<!-- &#x9; is the tab character in XML format. -->
			<!-- &#xD is the carriage return character in XML format. -->
			<!-- &#xA; is the linefeed character in XML format. -->
			<!-- &#xD;&#xA; together comprise a standard Windows carriage return/linefeed in XML format. -->
			<!-- Above XML control characters embed tabs & carriage return/linefeeds into the Detail field's text. -->
			<GroupElement ID="T50"
						  Required="true"
						  Revision="1.0"
						  Summary="PostMold"
						  Detail="6.0 Calibration &amp; Final Test, P10300 - P11800."
						  TestIDs="P10300|P10301" />
			<!-- GroupElement Revision 1.0 is initial release. -->
		</GroupElements>
	</GroupElementsSection>
	<TestElementsSection>
		<!--
	ID:			Required field.
				- Unique Identifier; no 2 can be identical, as ID is unique key in a Dictionary object.
				- Test001, Test002, Test003...
				- *Must* also be a valid C# identifier; see 
				  https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/identifier-names.
				- Recommend alpha-numerically ordering to avoid duplications,
				  which throw Exceptions.
				- Can be ordered as desired though; test execution order
				  *solely* determined by GroupElement TestIDs test ordering.
				- Cannot contain | character.
					- Using character '|' to separate GroupsToTestsElement IDTests.
					- Thus TestElement IDs cannot contain character '|' in them.
					- ID="Test001 valid.
					- ID="Test|001" invalid
	Revision:	Required field.
				- Revision of the Test's TestElement.
				- Increment whenever any TestElement field in Test changes; particularly
				  when LimitLow or LimitHigh are modified.
					- Typically will be set to "1.0" at initial release & left unchanged 
					  thereafter.
					- For most Customers & UUTs, this fine-grained revisioning will
					  be annoying, unnecessary overhead.
					- For some Customers or UUTs, however, it might be useful or even required.
				- Add a comment to the TestElement for each revision increment detailing modifications,
				  providing revision history
				- TestElements are customer test requirements, hence Revision is a required field.
	Summary:	Required field.
				- Concise description of Test; "Apply/measure +5V DC Input Voltage pre-programming."
	Detail:		Optional field.
				- Optional verbose description of Test:
				"Powerup:
					* Limit current to 0.75 Amps.
					* Measure voltage after 2.0 seconds delay.
					* Perform test before U6 µController and U7 EEPROM are programmed."
	LimitLow:	Required field, with caveats; see Invalid & Valid Tests below.
				- Test's low limit; example "4.75", for a 5.0VDC power supply with -5% tolerance.
				- Parsed as Double.TryParse(LimitLow, NumberStyles.Float, CultureInfo.CurrentCulture, out dMeasurement);
				- https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse?view=net-7.0#system-double-tryparse(system-string-system-globalization-numberstyles-system-iformatprovider-system-double
				- https://learn.microsoft.com/en-us/dotnet/api/system.globalization.numberstyles?view=net-7.0#system-globalization-numberstyles-float
				- Scientific Notation allowed & encouraged:
					- 1.0E5 is valid instead of 100000.0.
					- 1.5E-5 is valid instead of 0.000015.
					- Postive/Negative +/- signs allowed in both exponent & significand:
					+1.0E+5 is valid for +100000.0.
						- Reccommend 1.0E5 though.
					-1.0E5 is valid for -1000000.0.
					1.5E-5 is valid for 0.000015.
					-1.5E-5 is valid for -0.000015.
				- Int32 & Double both allowed:
					- 100000 & 100000.0 both valid.
				- Commas not allowed:
					- 100000 & 1000000 both valid.
					- 100,000 & 1,000,000 both invalid.
					- Recommend 1E5 and 1E6 instead.
	LimitHigh:	Required field, with caveats; see Invalid & Valid Tests below.
				- Test's high limit; example "5.25", for a 5.0VDC power supply with +5% tolerance.
				- Parsed identically as LimitLow.
	Units		Optional field.
				- SI Base & Derived Units:
					- Examples: A, V, F, H, Ω, S, °C, s, Hz, W, VA for respectively
					amperes, volts, farads, henries, ohms, siemens,
					°Celcius, seconds, hertz, watts, volt-amperes.
					https://en.wikipedia.org/wiki/SI_base_unit
					https://en.wikipedia.org/wiki/SI_derived_unit
					- Reccommend "N/A" when Units are Not Applicable:
						- Unlike TestElement Revision, Units always recorded
						  into the official test data, so explicit statement
						  of inapplicability reccommended, rather then 
						  implicit "".
					- NOTE: do not use Metric prefixes:
						- That is, do not use micro, milli, kilo, mega, etc.
						  or their μ, m, k, M, etc. symbols either.
						- Instead, always normalize LimitLow & LimitHigh to
						  unitary SI Units without prefixes.
						- 10000 Ω is valid.
						- 10 kiloΩ or 10 kΩ invalid.
						- Again, recommend Scientific Notation when applicable.
					- NOTE: Units are purely cosmetic in function; they aren't used
					  to calculate Test PASS/FAIL results as LimitLow & LimitHigh are,
					  only for reporting what Units their Test's measured values are in.
	UnitType	Optional field.
				- Examples; AC, DC, Peak, PP, RMS respectively for Alternating Current,
				Direct Current, Peak, Peak-to-Peak, Root-Mean-Squared.
				- NOTE: UnitTypes are purely cosmetic in function; they aren't used
					to calculate Test PASS/FAIL results as LimitLow & LimitHigh are,
					only for reporting metadata about the Units the tests measured
					values are in.

	And now, for the LimitLow & LimitHigh caveats:
	Invalid Tests:
		- LimitLow = LimitHigh = String.Empty.
		- LimitLow = String.Empty,	LimitHigh ≠ String.Empty, but won't parse to Double.
		- LimitHigh = String.Empty, LimitLow  ≠ String.Empty, but won't parse to Double.
		- LimitLow ≠ String.Empty,	LimitHigh ≠ String.Empty, neither parse to Double, & LimitLow ≠ LimitHigh.
		
	Valid Tests:
		- LimitLow < LimitHigh & both parse to Double:
			- Typical low & high limits, including a range of passing numeric measurements.
		- LimitLow > LimitHigh & both parse to Double:
			- Atypical low & high limits, excluding a range of measurements from passing..
			- Could test if a digital voltage is an acceptable TTL signal; LimitLow = 2.0, LimitHigh = 0.8
			  will pass if a digital voltage is not in the undefined TTL range of 0.8 to 2.0 VDC.
			- You'd also want additional tests to confirm the voltage was ≥ 0 and ≤ 5.0 though.
			- See "CUSTOM" Limits below.
		- LimitLow = LimitHigh & both parse to Double:
			- This simply means only the specific exact measurement passes.
			- *Not recommended* due to potential roundoff when parsing String Limits & instrument measurement inaccuracies.
			- Most (all) real-world measurements require non-zero tolerances.
		- LimitLow parses to Double, LimitHigh = String.Empty:
			- Only low limit, no high.
			- HiPot passes if ≥ 1E6 Ω.
		- LimitLow = String.Empty, LimitHigh parses to Double:
			- No low limit, only high.
			- Continuities pass if ≤ 5 Ω.
		- LimitLow = LimitHigh, both ≠ String.Empty, & neither parse to Double:
			- This is to verify specific checksums or CRCs, or to read specific non-numeric String contents from memory or a file, parse operator input, etc.
		- LimitLow = LimitHigh = "CUSTOM":
			- If multiple permissable results are required, say any String in the set {"Alpha", "Beta", "Gamma", "Delta", "Epsilon"} must pass:
			- Or multiple numeric ranges required, say any TTL Voltage V where (0 ≤ V ≤ 0.8) && (2.0 ≤ V ≤ 5.0):
				- Set both LimitLow & LimitHigh to "CUSTOM".
				- Write custom code in your Test method to evaluate the Test's measurement:
					- If in the set {"Alpha", "Beta", "Gamma", "Delta", "Epsilon"}
					- Or (0 ≤ V ≤ 0.8) && (2.0 ≤ V ≤ 5.0)
					- Then return EventCodes.PASS from your method, else return EventCodes.FAIL.
					- Or return any valid EventCode as applicable; e.g. EventCodes.ABORT, EventCodes.ERROR or EventCodes.UNSET.
			- Finally, write custom code in your Test method to log the results in detail directly, using Serilog's Log.Information() method
			  rather than ABTTestLibrary's default LogTasks.LogTest() method invoked from its Run() method.
				- Permits multiple measurements or operations to be performed & logged in a single Test, but with a *single* overall result.
				- Tradeoff is LimitLow/LimitHigh aren't defined or modifiable from this App.config file, only defined/modifiable in the Test's method.
		-->
		<TestElements>
			<TestElement ID="P00100" Revision="1.0" Summary="5.3.1. Primary Side A/V" Detail="Unprogrammed primary bias current" LimitLow="0.066" LimitHigh="0.086" Units="A" UnitType="DC" />
			<TestElement ID="P00101" Revision="1.0" Summary="5.3.1. Primary Side A/V" Detail="Unprogrammed primary bias voltage" LimitLow="6.15" LimitHigh="6.35" Units="V" UnitType="DC" />
			<TestElement ID="P00200" Revision="1.0" Summary="5.3.2. Secondary Side A/V" Detail="Unprogrammed secondary bias current" LimitLow="0.002" LimitHigh="0.004" Units="A" UnitType="DC" />
			<TestElement ID="P00201" Revision="1.0" Summary="5.3.2. Secondary Side A/V" Detail="Unprogrammed secondary bias voltage" LimitLow="6.15" LimitHigh="6.35" Units="V" UnitType="DC" />
			<TestElement ID="P00300" Revision="1.0" Summary="5.4.1. Secondary Side Programming" Detail="Programmed secondary bias current" LimitLow="0.0035" LimitHigh="0.0055" Units="A" UnitType="DC" />
			<TestElement ID="P00301" Revision="1.0" Summary="5.4.1. Secondary Side Programming" Detail="Programmed secondary bias voltage" LimitLow="6.15" LimitHigh="6.35" Units="V" UnitType="DC" />
			<TestElement ID="P00400" Revision="1.0" Summary="5.4.2.1 Primary Side Programming" Detail="Programmed Bootloader only secondary bias current" LimitLow="0.040" LimitHigh="0.050" Units="A" UnitType="DC" />
			<TestElement ID="P00401" Revision="1.0" Summary="5.4.2.1 Primary Side Programming" Detail="Programmed Bootloader only secondary bias voltage" LimitLow="6.15" LimitHigh="6.35" Units="V" UnitType="DC" />
			<TestElement ID="P00500" Revision="1.0" Summary="5.4.2.2 Primary Side Programming" Detail="Verify partial checksum" LimitLow="0xC2D0" LimitHigh="0xC2D0" Units="N/A" UnitType="N/A" />
			<TestElement ID="P00550" Revision="1.0" Summary="5.4.2.2 Primary Side Programming" Detail="Verify full checksum" LimitLow="0x7ED2" LimitHigh="0x7ED2" Units="N/A" UnitType="N/A" />
			<TestElement ID="P00650" Revision="1.0" Summary="5.4.2.2 Primary Side Programming" Detail="Verify main app version" LimitLow="TODO" LimitHigh="TODO" Units="N/A" UnitType="N/A" />
			<TestElement ID="P10300" Revision="1.0" Summary="PowerUp"   Detail="Initial Power, Voltage" LimitLow="0.0" LimitHigh="0.1" Units="V" UnitType="DC" />
			<TestElement ID="P10301" Revision="1.0" Summary="PowerDown" Detail="Final Power, Voltage"   LimitLow="5.9" LimitHigh="6.1" Units="V" UnitType="DC" />
		</TestElements>
	</TestElementsSection>
	<runtime>
		<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.IdentityModel.Abstractions" publicKeyToken="31bf3856ad364e35" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.Identity.Client" publicKeyToken="0a613f4dd989e8ae" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.48.1.0" newVersion="4.48.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Runtime.CompilerServices.Unsafe" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Memory" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.1.2" newVersion="4.0.1.2" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Buffers" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.3.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Text.Encodings.Web" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.ValueTuple" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.3.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.Bcl.AsyncInterfaces" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Text.Json" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-7.0.0.1" newVersion="7.0.0.1" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Azure.Core" publicKeyToken="92742159e12e44c8" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-1.26.0.0" newVersion="1.26.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Azure.Identity" publicKeyToken="92742159e12e44c8" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-1.8.0.0" newVersion="1.8.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.IdentityModel.Protocols.OpenIdConnect" publicKeyToken="31bf3856ad364e35" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.IdentityModel.Protocols" publicKeyToken="31bf3856ad364e35" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.IdentityModel.Tokens" publicKeyToken="31bf3856ad364e35" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.IdentityModel.Tokens.Jwt" publicKeyToken="31bf3856ad364e35" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.IdentityModel.JsonWebTokens" publicKeyToken="31bf3856ad364e35" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.IdentityModel.Logging" publicKeyToken="31bf3856ad364e35" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.Extensions.Configuration.Abstractions" publicKeyToken="adb9793829ddae60" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.Extensions.Configuration.Binder" publicKeyToken="adb9793829ddae60" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-7.0.0.1" newVersion="7.0.0.1" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Memory.Data" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Diagnostics.DiagnosticSource" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Microsoft.Identity.Client.Extensions.Msal" publicKeyToken="0a613f4dd989e8ae" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-2.25.0.0" newVersion="2.25.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Security.Cryptography.ProtectedData" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="NuGet.Frameworks" publicKeyToken="31bf3856ad364e35" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-5.11.3.1" newVersion="5.11.3.1" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="Ivi.Driver" publicKeyToken="a128c98f1d7717c1" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-1.5.0.0" newVersion="1.5.0.0" />
			</dependentAssembly>
		</assemblyBinding>
	</runtime>
	<startup>
		<supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8" />
	</startup>
</configuration>